diff --git a/node_modules/@whiskeysockets/baileys/.bun-tag-6bc22c37f6067614 b/.bun-tag-6bc22c37f6067614
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/lib/Socket/Client/websocket.js b/lib/Socket/Client/websocket.js
index 977c048b64a6894165e58bca12c80cb13cce5658..692093cd3b6d8a274ccfafd2e6aaa3aad8d02ffe 100644
--- a/lib/Socket/Client/websocket.js
+++ b/lib/Socket/Client/websocket.js
@@ -41,7 +41,7 @@ class WebSocketClient extends types_1.AbstractSocketClient {
             agent: this.config.agent,
         });
         this.socket.setMaxListeners(0);
-        const events = ['close', 'error', 'upgrade', 'message', 'open', 'ping', 'pong', 'unexpected-response'];
+        const events = ['close', 'error', 'message', 'open', 'ping', 'pong'];
         for (const event of events) {
             (_b = this.socket) === null || _b === void 0 ? void 0 : _b.on(event, (...args) => this.emit(event, ...args));
         }
diff --git a/lib/Socket/socket.js b/lib/Socket/socket.js
index 9b39302799cbd768f46d3a4bd6cd7a50ed495e38..0a82c0810063d117d298acfab08a68034ef6ea48 100644
--- a/lib/Socket/socket.js
+++ b/lib/Socket/socket.js
@@ -80,6 +80,9 @@ const makeSocket = (config) => {
     };
     /** log & process any unexpected errors */
     const onUnexpectedError = (err, msg) => {
+        if (!ws.isOpen) {
+            return;
+        }
         logger.error({ err }, `unexpected error in '${msg}'`);
     };
     /** await the next incoming message */
diff --git a/lib/Types/Message.d.ts b/lib/Types/Message.d.ts
index e04823e26465bacb2e672c57c7720bef97ac69e5..acc1b3603c01085fc810c7755ae749f7da8732a1 100644
--- a/lib/Types/Message.d.ts
+++ b/lib/Types/Message.d.ts
@@ -107,7 +107,7 @@ export type AnyMediaMessageContent = (({
     isAnimated?: boolean;
 } & WithDimensions) | ({
     document: WAMediaUpload;
-    mimetype: string;
+    mimetype?: string;
     fileName?: string;
     caption?: string;
 } & Contextable)) & {
@@ -211,6 +211,7 @@ export type MiscMessageGenerationOptions = MinimalRelayOptions & {
     font?: number;
     /** if it is broadcast */
     broadcast?: boolean;
+    waveformProxy?: Buffer | null;
 };
 export type MessageGenerationOptionsFromContent = MiscMessageGenerationOptions & {
     userJid: string;
diff --git a/lib/Utils/auth-utils.js b/lib/Utils/auth-utils.js
index 7a6127e952e87a794e516b977c9a74bd0cf5526d..9d04e9141e2ff467d9b7b740d7b15cb3ef75f2bc 100644
--- a/lib/Utils/auth-utils.js
+++ b/lib/Utils/auth-utils.js
@@ -124,6 +124,16 @@ const addTransactionCapability = (state, logger, { maxCommitRetries, delayBetwee
                 return state.set(data);
             }
         },
+        clear: () => {
+            if (isInTransaction()) {
+                logger.trace('clearing cache in transaction');
+                transactionCache = {};
+                mutations = {};
+            }
+            else {
+                return state.clear();
+            }
+        },
         isInTransaction,
         async transaction(work) {
             let result;
diff --git a/lib/Utils/messages-media.js b/lib/Utils/messages-media.js
index 2251c0019df0755d3f65c81ea3b48e963c33cdad..a6033b3463e0a9f5d44df96d609758882114d3a6 100644
--- a/lib/Utils/messages-media.js
+++ b/lib/Utils/messages-media.js
@@ -422,7 +422,11 @@ const toSmallestChunkSize = (num) => {
 const getUrlFromDirectPath = (directPath) => `https://${DEF_HOST}${directPath}`;
 exports.getUrlFromDirectPath = getUrlFromDirectPath;
 const downloadContentFromMessage = async ({ mediaKey, directPath, url }, type, opts = {}) => {
-    const downloadUrl = url || (0, exports.getUrlFromDirectPath)(directPath);
+    const isValidMediaUrl = url === null || url === void 0 ? void 0 : url.startsWith('https://mmg.whatsapp.net/');
+    const downloadUrl = isValidMediaUrl ? url : (0, exports.getUrlFromDirectPath)(directPath);
+    if (!downloadUrl) {
+        throw new boom_1.Boom('No valid media URL or directPath present in message', { statusCode: 400 });
+    }
     const keys = await getMediaKeys(mediaKey, type);
     return (0, exports.downloadEncryptedContent)(downloadUrl, keys, opts);
 };
diff --git a/lib/Utils/messages.js b/lib/Utils/messages.js
index 34d6e7d3d28dc0c5fc2a6ba7bf779d1df4f055d7..e2a97f54224a0a5c517cbf4336ab9ba16c59c0b9 100644
--- a/lib/Utils/messages.js
+++ b/lib/Utils/messages.js
@@ -141,7 +141,7 @@ const prepareWAMessageMedia = async (message, options) => {
                     logger === null || logger === void 0 ? void 0 : logger.debug('computed audio duration');
                 }
                 if (requiresWaveformProcessing) {
-                    uploadData.waveform = await (0, messages_media_1.getAudioWaveform)(originalFilePath, logger);
+                    uploadData.waveform = await (0, messages_media_1.getAudioWaveform)(options.waveformProxy || originalFilePath, logger);
                     logger === null || logger === void 0 ? void 0 : logger.debug('processed waveform');
                 }
                 if (requiresAudioBackground) {
