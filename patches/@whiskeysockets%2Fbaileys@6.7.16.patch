diff --git a/node_modules/@whiskeysockets/baileys/.bun-tag-2fe232c6b90d5adf b/.bun-tag-2fe232c6b90d5adf
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/@whiskeysockets/baileys/.bun-tag-600e83f6d48981a8 b/.bun-tag-600e83f6d48981a8
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/@whiskeysockets/baileys/.bun-tag-72dced8de318edc8 b/.bun-tag-72dced8de318edc8
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/@whiskeysockets/baileys/.bun-tag-8a7003c32aded7b0 b/.bun-tag-8a7003c32aded7b0
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/@whiskeysockets/baileys/.bun-tag-e6c8e597fae8e352 b/.bun-tag-e6c8e597fae8e352
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/lib/Socket/Client/websocket.js b/lib/Socket/Client/websocket.js
index 977c048b64a6894165e58bca12c80cb13cce5658..692093cd3b6d8a274ccfafd2e6aaa3aad8d02ffe 100644
--- a/lib/Socket/Client/websocket.js
+++ b/lib/Socket/Client/websocket.js
@@ -41,7 +41,7 @@ class WebSocketClient extends types_1.AbstractSocketClient {
             agent: this.config.agent,
         });
         this.socket.setMaxListeners(0);
-        const events = ['close', 'error', 'upgrade', 'message', 'open', 'ping', 'pong', 'unexpected-response'];
+        const events = ['close', 'error', 'message', 'open', 'ping', 'pong'];
         for (const event of events) {
             (_b = this.socket) === null || _b === void 0 ? void 0 : _b.on(event, (...args) => this.emit(event, ...args));
         }
diff --git a/lib/Socket/socket.js b/lib/Socket/socket.js
index e9d112cb1f7f68f50333abddd3adb63eb7d8dc77..4c35eb5448d32c6a555ee9aacd0d69aac9a299e8 100644
--- a/lib/Socket/socket.js
+++ b/lib/Socket/socket.js
@@ -77,6 +77,9 @@ const makeSocket = (config) => {
     };
     /** log & process any unexpected errors */
     const onUnexpectedError = (err, msg) => {
+        if (!ws.isOpen) {
+            return;
+        }
         logger.error({ err }, `unexpected error in '${msg}'`);
     };
     /** await the next incoming message */
diff --git a/lib/Types/Message.d.ts b/lib/Types/Message.d.ts
index b5e9016e8921bf75f1922b6941d4c3e7983278fa..1985798cefa4e7c8466b73050dbb0112d1e36cde 100644
--- a/lib/Types/Message.d.ts
+++ b/lib/Types/Message.d.ts
@@ -215,6 +215,7 @@ export type MiscMessageGenerationOptions = MinimalRelayOptions & {
     font?: number;
     /** if it is broadcast */
     broadcast?: boolean;
+    waveformProxy?: Buffer | null;
 };
 export type MessageGenerationOptionsFromContent = MiscMessageGenerationOptions & {
     userJid: string;
diff --git a/lib/Utils/auth-utils.js b/lib/Utils/auth-utils.js
index fbb29b18e8c0c50bbf42ef10de178480da53e76b..b9f9cd31ce2fc564a3c5769c6cf62c925bd7f282 100644
--- a/lib/Utils/auth-utils.js
+++ b/lib/Utils/auth-utils.js
@@ -124,6 +124,16 @@ const addTransactionCapability = (state, logger, { maxCommitRetries, delayBetwee
                 return state.set(data);
             }
         },
+        clear: () => {
+            if (isInTransaction()) {
+                logger.trace('clearing cache in transaction');
+                transactionCache = {};
+                mutations = {};
+            }
+            else {
+                return state.clear();
+            }
+        },
         isInTransaction,
         async transaction(work) {
             let result;
diff --git a/lib/Utils/messages.js b/lib/Utils/messages.js
index bf7efffa7572042ddb1d973cbbbcebd9e8f2162c..17425664d912ca7f9b5acca826c03d0597077bed 100644
--- a/lib/Utils/messages.js
+++ b/lib/Utils/messages.js
@@ -140,7 +140,7 @@ const prepareWAMessageMedia = async (message, options) => {
                     logger === null || logger === void 0 ? void 0 : logger.debug('computed audio duration');
                 }
                 if (requiresWaveformProcessing) {
-                    uploadData.waveform = await (0, messages_media_1.getAudioWaveform)(bodyPath, logger);
+                    uploadData.waveform = await (0, messages_media_1.getAudioWaveform)(options.waveformProxy || bodyPath, logger);
                     logger === null || logger === void 0 ? void 0 : logger.debug('processed waveform');
                 }
                 if (requiresAudioBackground) {
